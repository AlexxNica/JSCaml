49,50c49
< #include <wtf/ASCIICType.h>
< #include <wtf/Vector.h>
---
> #include "ASCIICType.h"
51a51
> #include <ctype.h>
53,54c53
< 
< using namespace WTF;
---
> #include <string.h> /* for memcpy */
73c72
< an empty string has been matched by a bracket to break infinite loops. */ 
---
> an empty string has been matched by a bracket to break infinite loops. */
82c81
<     
---
> 
90,91c89,90
<     
<     
---
> 
> 
100c99
<         
---
> 
102c101
<         
---
> 
113c112
<         
---
> 
194c193
<     
---
> 
206c205
<     
---
> 
208c207
<     
---
> 
211c210
<     
---
> 
213c212
<     
---
> 
228c227
<     
---
> 
308c307
<     
---
> 
313c312
<     
---
> 
318c317
<     
---
> 
325c324
<     
---
> 
340c339
<     
---
> 
387c386
<     
---
> 
414c413
<     
---
> 
423c422
<     
---
> 
429c428
<     
---
> 
442c441
<     
---
> 
444c443
<     
---
> 
450c449
<     
---
> 
455c454
<         
---
> 
463c462
<         
---
> 
471c470
<                 
---
> 
483c482
<                 
---
> 
485c484
<                 
---
> 
489c488
<                 
---
> 
491c490
<                 
---
> 
497c496
<                 
---
> 
503c502
<                 
---
> 
513c512
<                 
---
> 
516c515
<                 
---
> 
521c520
<                 
---
> 
523c522
<                 
---
> 
531c530
<                 
---
> 
534c533
<                 
---
> 
537c536
<                 
---
> 
541c540
<                 
---
> 
547c546
<                 
---
> 
557c556
<                 
---
> 
567c566
<                 
---
> 
572c571
<                 
---
> 
588c587
<                 
---
> 
592c591
<                 
---
> 
594c593
<                 
---
> 
597c596
<                 
---
> 
601c600
<                 
---
> 
606c605
<                 
---
> 
611c610
<                 
---
> 
623c622
<                 
---
> 
629c628
<                 
---
> 
634c633
<                 
---
> 
637c636
<                 
---
> 
654,656c653,655
<                 
<             /* Start of subject, or after internal newline if multiline. */
<                 
---
> 
>             /* Start of subject. */
> 
658c657
<                 if (stack.currentFrame->args.subjectPtr != md.startSubject && (!md.multiline || !isNewline(stack.currentFrame->args.subjectPtr[-1])))
---
>                 if (stack.currentFrame->args.subjectPtr != md.startSubject)
662,664c661,671
<                 
<             /* End of subject, or before internal newline if multiline. */
<                 
---
> 
>             /* After internal newline if multiline. */
> 
>             BEGIN_OPCODE(BOL):
>                 if (stack.currentFrame->args.subjectPtr != md.startSubject && !isNewline(stack.currentFrame->args.subjectPtr[-1]))
>                     RRETURN_NO_MATCH;
>                 stack.currentFrame->args.instructionPtr++;
>                 NEXT_OPCODE;
> 
>             /* End of subject. */
> 
666c673,681
<                 if (stack.currentFrame->args.subjectPtr < md.endSubject && (!md.multiline || !isNewline(*stack.currentFrame->args.subjectPtr)))
---
>                 if (stack.currentFrame->args.subjectPtr < md.endSubject)
>                     RRETURN_NO_MATCH;
>                 stack.currentFrame->args.instructionPtr++;
>                 NEXT_OPCODE;
> 
>             /* Before internal newline if multiline. */
> 
>             BEGIN_OPCODE(EOL):
>                 if (stack.currentFrame->args.subjectPtr < md.endSubject && !isNewline(*stack.currentFrame->args.subjectPtr))
670c685
<                 
---
> 
672c687
<                 
---
> 
677c692
<                 
---
> 
682c697
<                 
---
> 
689c704
<                 
---
> 
691c706
<                 
---
> 
731c746
<                 
---
> 
739c754
<                 
---
> 
747c762
<                 
---
> 
755c770
<                 
---
> 
759c774
<                 
---
> 
764c779
<                 
---
> 
769c784
<                 
---
> 
771c786
<                 
---
> 
781c796
<                         
---
> 
791c806
<                     
---
> 
798c813
<                 
---
> 
801c816
<                 
---
> 
804c819
<                 
---
> 
806c821
<                 
---
> 
812c827
<                 
---
> 
815c830
<                 
---
> 
818c833
<                 
---
> 
820c835
<                 
---
> 
832c847
<                 
---
> 
834c849
<                 
---
> 
851c866
<                 
---
> 
858c873
<              
---
> 
862c877
<                 
---
> 
867c882
<                 
---
> 
877c892
<                         
---
> 
887c902
<                         
---
> 
892c907
<                 
---
> 
894c909
<                 
---
> 
907c922
<                 
---
> 
910c925
<                 
---
> 
912,913c927,928
<                     NEXT_OPCODE;      
<                 
---
>                     NEXT_OPCODE;
> 
937c952
<                     
---
> 
958c973
<                     
---
> 
962c977
<                 
---
> 
964c979
<                 
---
> 
968c983
<                 
---
> 
978c993
<                         
---
> 
988c1003
<                         
---
> 
992c1007
<                 
---
> 
994c1009
<                 
---
> 
1002c1017
<                 
---
> 
1005c1020
<                 
---
> 
1008c1023
<                 
---
> 
1011c1026
<                 
---
> 
1025c1040
<                 
---
> 
1027c1042
<                 
---
> 
1047c1062
<                 
---
> 
1049c1064
<                 
---
> 
1051c1066
<                 
---
> 
1062c1077
<                 
---
> 
1064c1079
<                 
---
> 
1077c1092
<                 
---
> 
1079c1094
<                 
---
> 
1088c1103
<                 
---
> 
1090c1105
<                 
---
> 
1099c1114
<                 
---
> 
1101c1116
<                 
---
> 
1107c1122
<                 
---
> 
1115c1130
<                 
---
> 
1123c1138
<                 
---
> 
1127c1142
<                 
---
> 
1129c1144
<                 
---
> 
1135c1150
<                 
---
> 
1137,1138c1152,1154
<                     int othercase = md.ignoreCase ? kjs_pcre_ucp_othercase(stack.currentFrame->locals.fc) : -1;
<                     
---
>                     int othercase;
>                     othercase = md.ignoreCase ? kjs_pcre_ucp_othercase(stack.currentFrame->locals.fc) : -1;
> 
1144c1160
<                     
---
> 
1147c1163
<                     
---
> 
1181c1197
<                     
---
> 
1187c1203
<                     
---
> 
1190c1206
<                     
---
> 
1223c1239
<                 
---
> 
1225c1241
<                 
---
> 
1242c1258
<                 
---
> 
1249c1265
<                 
---
> 
1255c1271
<                 
---
> 
1263c1279
<                 
---
> 
1271c1287
<                 
---
> 
1275c1291
<                 
---
> 
1280c1296
<                 
---
> 
1288c1304
<                 
---
> 
1290c1306
<                 
---
> 
1294c1310
<                     
---
> 
1302c1318
<                     
---
> 
1304,1305c1320,1321
<                         NEXT_OPCODE;      
<                     
---
>                         NEXT_OPCODE;
> 
1319c1335
<                     
---
> 
1321c1337
<                     
---
> 
1324c1340
<                         
---
> 
1342c1358
<                         
---
> 
1347c1363
<                 
---
> 
1349c1365
<                 
---
> 
1359c1375
<                     
---
> 
1371c1387
<                     
---
> 
1373c1389
<                     
---
> 
1376c1392
<                         
---
> 
1397c1413
<                 
---
> 
1401c1417
<                 
---
> 
1407c1423
<                 
---
> 
1415c1431
<                 
---
> 
1423c1439
<                 
---
> 
1427c1443
<                 
---
> 
1430c1446
<                 
---
> 
1435c1451
<                 
---
> 
1447c1463
<                             
---
> 
1455c1471
<                             
---
> 
1463c1479
<                             
---
> 
1471c1487
<                             
---
> 
1479c1495
<                             
---
> 
1487c1503
<                             
---
> 
1495c1511
<                             
---
> 
1501c1517
<                 
---
> 
1503c1519
<                 
---
> 
1505,1506c1521,1522
<                     NEXT_OPCODE;    
<                 
---
>                     NEXT_OPCODE;
> 
1509c1525
<                 
---
> 
1517c1533
<                         
---
> 
1524c1540
<                                 
---
> 
1529c1545
<                                 
---
> 
1534c1550
<                                 
---
> 
1539c1555
<                                 
---
> 
1544c1560
<                                 
---
> 
1549c1565
<                                 
---
> 
1554c1570
<                                 
---
> 
1562c1578
<                 
---
> 
1565c1581
<                 
---
> 
1568c1584
<                     
---
> 
1577c1593
<                             
---
> 
1588c1604
<                             
---
> 
1599c1615
<                             
---
> 
1610c1626
<                             
---
> 
1621c1637
<                             
---
> 
1632c1648
<                             
---
> 
1643c1659
<                             
---
> 
1648c1664
<                     
---
> 
1650c1666
<                     
---
> 
1658c1674
<                     
---
> 
1660c1676
<                     
---
> 
1664c1680
<                 
---
> 
1675c1691
<                 
---
> 
1686c1702
<                  
---
> 
1690c1706
<                  
---
> 
1694c1710
<                 
---
> 
1696c1712
<                 
---
> 
1698c1714
<                 
---
> 
1701c1717
<                 
---
> 
1705c1721
<                 
---
> 
1711c1727
<                 
---
> 
1716c1732
<                     
---
> 
1719c1735
<                     
---
> 
1726c1742
<                     
---
> 
1728c1744
<                     
---
> 
1732c1748
<                     
---
> 
1735c1751
<                 
---
> 
1737c1753
<                 
---
> 
1740c1756
<         
---
> 
1744c1760
<         
---
> 
1746c1762
<     
---
> 
1748c1764
<     
---
> 
1750c1766
<     
---
> 
1781c1797
<     
---
> 
1784c1800
<     
---
> 
1786c1802
<     
---
> 
1854c1870
<      
---
> 
1908c1924
<     
---
> 
1913c1929
<     
---
> 
1916c1932
<     
---
> 
1921c1937
<     
---
> 
1923c1939
<     
---
> 
1936c1952
<     
---
> 
1940c1956
<     
---
> 
1944c1960
<     
---
> 
1948c1964
<     
---
> 
1952c1968
<     
---
> 
1959c1975
<     
---
> 
1965c1981
<     
---
> 
1973c1989
<     
---
> 
1976c1992
<     
---
> 
1985c2001
<     
---
> 
1988c2004
<     
---
> 
1992c2008
<     
---
> 
2001c2017
<         
---
> 
2005c2021
<                 
---
> 
2012c2028
<         
---
> 
2014,2015c2030,2031
<         const unsigned char* start_code = (const unsigned char*)(re + 1);
<         
---
>         const unsigned char* start_code = reinterpret_cast<const unsigned char*>(re + 1);
> 
2017c2033
<         
---
> 
2027c2043
<             DPRINTF((">>>> error: returning %d\n", rc));
---
>             DPRINTF((">>>> error: returning %d\n", returnCode));
2030c2046
<         
---
> 
2033c2049
<         
---
> 
2041c2057
<             
---
> 
2045c2061
<         
---
> 
2047c2063
<         
---
> 
2054,2055c2070,2071
<         
<         DPRINTF((">>>> returning %d\n", rc));
---
> 
>         DPRINTF((">>>> returning %d\n", returnCode));
2057,2058c2073,2074
<     } while (startMatch <= endSubject);
<     
---
>     } while (!(re->options & IsAnchoredOption) && startMatch <= endSubject);
> 
2063c2079
<     
---
> 
